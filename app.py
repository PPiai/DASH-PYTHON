import streamlit as st
import pandas as pd
import requests
import json
from datetime import datetime
import re
from time import sleep

# Set page config
st.set_page_config(
    page_title="Meta Ads Campaign Manager",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Add custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
        color: #1877F2;
    }
    .sub-header {
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }
    .stButton button {
        background-color: #000000;
        color: white;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
    .stButton button:hover {
        background-color: #ffffff;
        color: black;
        border-radius: 5px;
        border-color: #ff0000;
    }
    .success-message {
        background-color: #e6f7e6;
        color: #2e7d32;
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1rem;
    }
    .error-message {
        background-color: #ffebee;
        color: #c62828;
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1rem;
    }
    .upload-section {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        border: 1px solid #e9ecef;
    }
    .validation-section {
        background-color: #e8f5e8;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        border: 1px solid #c3e6c3;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state variables if they don't exist
if 'page' not in st.session_state:
    st.session_state.page = 'Create Ads'

# Function to validate URL
def is_valid_url(url):
    if not url:
        return False
    url_pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return url_pattern.match(url) is not None

def is_valid_driveurl(url):
    if not url:
        return False
    url_pattern_drive = re.compile(
        r'^https?://'  # http:// ou https://
        r'(?:www\.)?'  # opcional www
        r'drive\.google\.com'  # dom√≠nio fixo do Google Drive
        r'(?:/[\w\-./?=&%]*)?$',  # caminhos e par√¢metros permitidos
        re.IGNORECASE
    )
    return url_pattern_drive.match(url)

# Function to send data to webhook
def send_to_webhook(data, endpoint_url):
    try:
        response = requests.post(
            endpoint_url,
            json=data,
            headers={"Content-Type": "application/json"}
        )
        if response.status_code == 200:
            return True, "Dados enviados com sucesso!"
        else:
            return False, f"Erro: {response.status_code} - {response.text}"
    except Exception as e:
        return False, f"Erro: {str(e)}"

# Function for Create Ads page
def show_create_ads_page():
    st.markdown('<h1 class="main-header">üß© Criar An√∫ncios</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Crie an√∫ncios baseados em conjuntos de an√∫ncios existentes</p>', unsafe_allow_html=True)
    
    # Initialize session state for ads data if it doesn't exist
    if 'ads_df' not in st.session_state:
        st.session_state.ads_df = pd.DataFrame(columns=[
            "ID Adset", "Nome An√∫ncio", "Tipo de An√∫ncio", "ID da P√°gina do Facebook",
            "Status do An√∫ncio", "Link de Destino", "Texto do An√∫ncio", 
            "Call to Action (CTA)", "BM Conectada", "ID Conta de An√∫ncios"
        ])
    
    # Create the data editor
    edited_df = st.data_editor(
        st.session_state.ads_df,
        column_config={
            "ID Adset": st.column_config.NumberColumn("ID Adset", required=True),
            "Nome An√∫ncio": st.column_config.TextColumn("Nome An√∫ncio", required=True),
            "Tipo de An√∫ncio": st.column_config.SelectboxColumn(
                "Tipo de An√∫ncio", 
                options=["Image", "Video", "Carousel"], 
                required=True
            ),
            "ID da P√°gina do Facebook": st.column_config.NumberColumn("ID da P√°gina do Facebook", required=True),
            "Status do An√∫ncio": st.column_config.SelectboxColumn(
                "Status do An√∫ncio", 
                options=["ACTIVE", "PAUSED"], 
                required=True
            ),
            "Link de Destino": st.column_config.TextColumn("Link de Destino", required=True),
            "Texto do An√∫ncio": st.column_config.TextColumn("Texto do An√∫ncio", required=True),
            "Call to Action (CTA)": st.column_config.SelectboxColumn(
                "Call to Action (CTA)", 
                options=["BUY_NOW", "LEARN_MORE", "SIGN_UP", "DOWNLOAD", "GET_QUOTE", 
                        "CONTACT_US", "APPLY_NOW", "BOOK_NOW", "GET_OFFER", "SUBSCRIBE", "WATCH_MORE"], 
                required=True
            ),
            "BM Conectada": st.column_config.SelectboxColumn(
                "BM Conectada", 
                options=["Piai & Associados", "V4 Ferraz & Co"], 
                required=True
            ),
            "ID Conta de An√∫ncios": st.column_config.NumberColumn("ID Conta de An√∫ncios", required=True)
        },
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True
    )
    
    # Update the session state with the edited DataFrame
    st.session_state.ads_df = edited_df
    
    # Upload sections
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("üì∑ **Upload de Imagem / V√≠deo**")
        st.markdown("Link do Drive da Imagem")
        image_links = st.text_area(
            "Adicione a URL do drive de sua Imagem / V√≠deo Aqui",
            placeholder="https://drive.google.com/file/d/exemplo-exemplo/view?usp=drive_link",
            value="http://drive.google.com/open?id=COLE_O_ID_AQUI",
            height=100,
            help="Certifique-se de que o arquivo esteja compartilhado.",
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("üé¨ **Upload de Thumbnail de V√≠deo**")
        st.markdown("Link do Drive da Thumbnail (Caso tipo de an√∫ncio = v√≠deo)")
        thumbnail_link = st.text_area(
            "Adicione a URL do drive de sua Thumbnail Aqui",
            placeholder="https://drive.google.com/file/d/exemplo-exemplo/view?usp=drive_link",
            value="http://drive.google.com/open?id=COLE_O_ID_AQUI",
            height=100,
            help="Certifique-se de que o arquivo esteja compartilhado.",
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    
    validation_messages = []
    
    # Validate DataFrame
    if not st.session_state.ads_df.empty:
        for index, row in st.session_state.ads_df.iterrows():
            # Check for missing required fields
            for col in st.session_state.ads_df.columns:
                if pd.isna(row[col]) or row[col] == "":
                    validation_messages.append(f"‚ùå Linha {index+1}: {col} √© obrigat√≥rio")
            
            # Validate destination link
            if not pd.isna(row["Link de Destino"]) and row["Link de Destino"]:
                if not is_valid_url(row["Link de Destino"]):
                    validation_messages.append(f"‚ùå Linha {index+1}: Link de Destino deve ser uma URL v√°lida")
    
    # Validate image links
    if image_links:
        for line_num, link in enumerate(image_links.strip().split('\n'), 1):
            if link.strip() and not is_valid_driveurl(link.strip()):
                validation_messages.append(f"‚ùå Link de Imagem linha {line_num}: URL inv√°lida || Verifique se o link da imagem √© de um drive")
    
    # Validate thumbnail link
    if thumbnail_link and not is_valid_driveurl(thumbnail_link.strip()):
        validation_messages.append("‚ùå Link de Thumbnail: URL inv√°lida || Fa√ßa upload da Imagem no google Drive")
    
    if validation_messages:
        for msg in validation_messages:
            st.markdown(msg)
    else:
        st.markdown("‚úÖ Todos os campos est√£o v√°lidos!")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Submit button
    st.divider()
    col1, col2, col3 = st.columns([2, 1, 2])
    with col2:
        submit_button = st.button("üöÄ Enviar An√∫ncios", type="primary", use_container_width=True)
    
    # Process form submission
    if submit_button:
        if st.session_state.ads_df.empty:
            st.error("Por favor, adicione pelo menos um an√∫ncio antes de enviar.")
        elif validation_messages:
            st.error("Por favor, corrija os erros de valida√ß√£o antes de enviar.")
        else:
            # Prepare data for submission
            ads_data = st.session_state.ads_df.to_dict('records')
            
            # Add image and thumbnail links
            image_urls = [link.strip() for link in image_links.split('\n') if link.strip()] if image_links else []
            thumbnail_url = thumbnail_link.strip() if thumbnail_link else ""
            
            for ad in ads_data:
                ad["Imagens"] = image_urls
                ad["Thumbnail (Video)"] = thumbnail_url
                ad["SubmissionTime"] = str(datetime.now())
            
            # Prepare final payload
            payload = {
                "tipo_requisicao": "criar_anuncio",
                "dados": ads_data,
                "timestamp": str(datetime.now())
            }
            
            # Send to webhook
            webhook_url = "https://ferrazpiai-n8n-editor.uyk8ty.easypanel.host/webhook-test/e78ecade-5474-4877-93a6-f91980088282"
            success, message = send_to_webhook(payload, webhook_url)
            
            if success:
                st.markdown("‚úÖ Envio feito com sucesso!")
                st.markdown(f'<div class="success-message">{message}</div>', unsafe_allow_html=True)
                # Clear form after successful submission
                st.session_state.ads_df = pd.DataFrame(columns=[
                    "Nome An√∫ncio", "Tipo de An√∫ncio", "ID da P√°gina do Facebook", 
                    "Status do An√∫ncio", "Link de Destino", "Texto do An√∫ncio", 
                    "Call to Action (CTA)", "BM Conectada", "ID Conta de An√∫ncios"
                ])
                sleep(5)
                st.rerun()
            else:
                st.markdown(f'<div class="error-message">{message}</div>', unsafe_allow_html=True)
            
            st.subheader("üìã Preview JSON")
            st.json(payload, expanded=False)

# Function for Create Campaigns page
def show_create_campaigns_page():
    st.markdown('<h1 class="main-header">üöÄ Criar Campanhas</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Crie campanhas completas com entrada manual ou templates</p>', unsafe_allow_html=True)
    
    # Campaign templates
    templates = {
        "Lead Gen for Real Estate": {
            "Tipo de Campanha": "ABO",
            "Objetivo da Campanha": "LEAD_GENERATION",
            "Status da Campanha": "ACTIVE",
            "Tipo de Otimiza√ß√£o": "LEAD_GENERATION",
            "Cobran√ßa do Adset": "IMPRESSIONS",
            "Estrat√©gia de Lance": "LOWEST_COST_WITHOUT_CAP",
            "Tipo de An√∫ncio": "Image",
            "CTA": "LEARN_MORE",
            "Tipo de Destino": "WEBSITE"
        },
        "E-commerce Conversions": {
            "Tipo de Campanha": "CBO",
            "Objetivo da Campanha": "SALES",
            "Status da Campanha": "ACTIVE",
            "Tipo de Otimiza√ß√£o": "CONVERSIONS",
            "Cobran√ßa do Adset": "IMPRESSIONS",
            "Estrat√©gia de Lance": "COST_CAP",
            "Tipo de An√∫ncio": "Carousel",
            "CTA": "BUY_NOW",
            "Tipo de Destino": "WEBSITE"
        }
    }
    
    # Template selection
    st.subheader("üìã Template de Campanha (Opcional)")
    selected_template = st.selectbox(
        "Selecione um template ou crie do zero",
        ["Criar do zero"] + list(templates.keys())
    )
    
    # Initialize form values based on template
    if selected_template != "Criar do zero" and selected_template in templates:
        template_data = templates[selected_template]
    else:
        template_data = {}
    
    # Create tabs for different sections
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Info Geral da Campanha", "‚öôÔ∏è Configura√ß√µes do Ad Set", "üé® Info Criativa", "üéØ Segmenta√ß√£o de Audi√™ncia"])
    
    with tab1:
        st.subheader("Informa√ß√µes Gerais da Campanha")
        
        col1, col2 = st.columns(2)
        with col1:
            page_id = st.number_input("ID da P√°gina", min_value=1, value=None, placeholder="Digite o ID da P√°gina")
            ad_account_id = st.number_input("ID da Conta de An√∫ncios", min_value=1, value=None, placeholder="Digite o ID da Conta")
        
        with col2:
            campaign_type = st.selectbox(
                "Tipo de Campanha",
                ["ABO", "CBO", "ADV+"],
                index=["ABO", "CBO", "ADV+"].index(template_data.get("Tipo de Campanha", "ABO"))
            )
        
        campaign_name = st.text_input("Nome da Campanha", placeholder="Digite o Nome da Campanha")
        
        campaign_objective = st.selectbox(
            "Objetivo da Campanha",
            ["AWARENESS", "TRAFFIC", "ENGAGEMENT", "LEAD_GENERATION", "APP_PROMOTION", "SALES"],
            index=["AWARENESS", "TRAFFIC", "ENGAGEMENT", "LEAD_GENERATION", "APP_PROMOTION", "SALES"].index(template_data.get("Objetivo da Campanha", "AWARENESS"))
        )
    
    with tab2:
        st.subheader("Configura√ß√µes do Ad Set")
        
        col1, col2 = st.columns(2)
        with col1:
            campaign_status = st.selectbox(
                "Status da Campanha",
                ["ACTIVE", "PAUSED"],
                index=["ACTIVE", "PAUSED"].index(template_data.get("Status da Campanha", "ACTIVE"))
            )
            
            ad_set_name = st.text_input("Nome do Ad Set", placeholder="Digite o Nome do Ad Set")
        
        # Dynamic optimization options based on campaign objective
        optimization_options = {
            "AWARENESS": ["IMPRESSIONS", "REACH", "BRAND_AWARENESS"],
            "TRAFFIC": ["LINK_CLICKS", "LANDING_PAGE_VIEWS"],
            "ENGAGEMENT": ["POST_ENGAGEMENT", "PAGE_LIKES", "EVENT_RESPONSES"],
            "LEAD_GENERATION": ["LEAD_GENERATION", "CONVERSIONS"],
            "APP_PROMOTION": ["APP_INSTALLS", "APP_EVENTS"],
            "SALES": ["CONVERSIONS", "CATALOG_SALES", "VALUE"]
        }
        
        current_optimization_options = optimization_options.get(campaign_objective, ["IMPRESSIONS"])
        
        with col2:
            optimization_type = st.selectbox(
                "Tipo de Otimiza√ß√£o",
                current_optimization_options,
                index=current_optimization_options.index(template_data.get("Tipo de Otimiza√ß√£o", current_optimization_options[0]))
            )
        
        # Dynamic billing event options
        billing_event_options = ["IMPRESSIONS", "LINK_CLICKS", "THRUPLAY", "TWO_SECOND_CONTINUOUS_VIDEO_VIEWS"]
        
        col1, col2 = st.columns(2)
        with col1:
            billing_event = st.selectbox(
                "Cobran√ßa do Adset",
                billing_event_options,
                index=billing_event_options.index(template_data.get("Cobran√ßa do Adset", "IMPRESSIONS"))
            )
        
        # Bid strategy options
        bid_strategy_options = ["LOWEST_COST_WITHOUT_CAP", "COST_CAP", "LOWEST_COST_WITH_BID_CAP"]
        
        with col2:
            bid_strategy = st.selectbox(
                "Estrat√©gia de Lance",
                bid_strategy_options,
                index=bid_strategy_options.index(template_data.get("Estrat√©gia de Lance", "LOWEST_COST_WITHOUT_CAP"))
            )
        
        col1, col2 = st.columns(2)
        with col1:
            daily_budget = st.number_input("Or√ßamento Di√°rio", min_value=1.0, step=0.5, format="%.2f")
        
        with col2:
            bid_cap = st.number_input("Valor M√°ximo de Lance (Opcional)", min_value=0.1, step=0.1, format="%.2f", value=None)
    
    with tab3:
        st.subheader("Informa√ß√µes Criativas")
        
        col1, col2 = st.columns(2)
        with col1:
            ad_type = st.selectbox(
                "Tipo de An√∫ncio",
                ["Image", "Video", "Carousel"],
                index=["Image", "Video", "Carousel"].index(template_data.get("Tipo de An√∫ncio", "Image"))
            )
            
            ad_name = st.text_input("Nome do An√∫ncio", placeholder="Digite o Nome do An√∫ncio")
        
        with col2:
            destination_link = st.text_input("Link de Destino", placeholder="https://exemplo.com")
        
        ad_text = st.text_area("Texto do An√∫ncio", placeholder="Digite o texto do seu an√∫ncio aqui...")
        
        col1, col2 = st.columns(2)
        with col1:
            # CTA options
            cta_options = ["BUY_NOW", "LEARN_MORE", "SIGN_UP", "DOWNLOAD", "GET_QUOTE", "CONTACT_US", "APPLY_NOW", "BOOK_NOW", "GET_OFFER", "SUBSCRIBE", "WATCH_MORE"]
            
            cta = st.selectbox(
                "Call to Action",
                cta_options,
                index=cta_options.index(template_data.get("CTA", "LEARN_MORE"))
            )
        
        with col2:
            # Destination type options
            destination_type_options = ["WEBSITE", "MESSENGER", "WHATSAPP", "INSTAGRAM_PROFILE", "APP", "PHONE_CALL", "SHOP"]
            
            destination_type = st.selectbox(
                "Tipo de Destino",
                destination_type_options,
                index=destination_type_options.index(template_data.get("Tipo de Destino", "WEBSITE"))
            )
        
        # Upload sections for campaigns
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("üì∑ **Upload de Imagem / V√≠deo**")
            st.markdown("Link do Drive da Imagem")
            campaign_image_links = st.text_area(
                "Adicione a URL do drive de sua Imagem / V√≠deo Aqui",
                placeholder="https://drive.google.com/file/d/...",
                height=100,
                label_visibility="collapsed",
                key="campaign_images"
            )
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown("üé¨ **Upload de Thumbnail de V√≠deo**")
            st.markdown("Link do Drive da Thumbnail")
            campaign_thumbnail_link = st.text_area(
                "Adicione a URL do drive de sua Thumbnail Aqui",
                placeholder="https://drive.google.com/file/d/...",
                height=100,
                label_visibility="collapsed",
                key="campaign_thumbnail"
            )
            st.markdown('</div>', unsafe_allow_html=True)
    
    with tab4:
        st.subheader("Segmenta√ß√£o de Audi√™ncia")
        
        col1, col2 = st.columns(2)
        with col1:
            connected_bm = st.selectbox(
                "Conta em Qual BM?",
                ["Piai & Associados", "V4 Ferraz & Co"]
            )
        
        col1, col2 = st.columns(2)
        with col1:
            min_age = st.number_input("Idade M√≠nima", min_value=13, max_value=65, value=18)
        
        with col2:
            max_age = st.number_input("Idade M√°xima", min_value=13, max_value=65, value=65)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            city = st.text_input("Cidade", placeholder="ex: S√£o Paulo")
        
        with col2:
            state = st.text_input("Estado (SP, AL, MT...)", placeholder="ex: SP, RJ")
        
        with col3:
            country = st.text_input("Pa√≠s (BR, Us...)", placeholder="ex: BR, US")
        
        radius = st.slider("Raio de Dist√¢ncia (Milhas)", min_value=1, max_value=18, value=9)
    
    # Validation warnings
    st.subheader("‚ö†Ô∏è Valida√ß√£o")
    
    # Check for compatibility between objective and optimization
    valid_combinations = {
        "AWARENESS": ["IMPRESSIONS", "REACH", "BRAND_AWARENESS"],
        "TRAFFIC": ["LINK_CLICKS", "LANDING_PAGE_VIEWS"],
        "ENGAGEMENT": ["POST_ENGAGEMENT", "PAGE_LIKES", "EVENT_RESPONSES"],
        "LEAD_GENERATION": ["LEAD_GENERATION", "CONVERSIONS"],
        "APP_PROMOTION": ["APP_INSTALLS", "APP_EVENTS"],
        "SALES": ["CONVERSIONS", "CATALOG_SALES", "VALUE"]
    }
    
    if campaign_objective and optimization_type:
        if optimization_type not in valid_combinations.get(campaign_objective, []):
            st.warning(f"‚ö†Ô∏è O tipo de otimiza√ß√£o '{optimization_type}' pode n√£o ser compat√≠vel com o objetivo da campanha '{campaign_objective}'.")
    
    # Check for compatibility between CTA and destination type
    incompatible_cta_destination = {
        "BUY_NOW": ["PHONE_CALL"],
        "LEARN_MORE": [],
        "SIGN_UP": ["PHONE_CALL"],
        "DOWNLOAD": ["PHONE_CALL", "MESSENGER"],
        "GET_QUOTE": ["APP"],
        "CONTACT_US": [],
        "APPLY_NOW": ["PHONE_CALL"],
        "BOOK_NOW": ["APP"],
        "GET_OFFER": ["PHONE_CALL"],
        "SUBSCRIBE": ["PHONE_CALL"],
        "WATCH_MORE": ["PHONE_CALL"]
    }
    
    if cta and destination_type:
        if destination_type in incompatible_cta_destination.get(cta, []):
            st.warning(f"‚ö†Ô∏è O CTA '{cta}' pode n√£o ser compat√≠vel com o tipo de destino '{destination_type}'.")
    
    # Submit button
    col1, col2, col3 = st.columns([2, 1, 2])
    with col2:
        submit_button = st.button("üöÄ Enviar Campanha", type="primary", use_container_width=True)
    
    # Process form submission
    if submit_button:
        # Validate required fields
        required_fields = {
            "ID da P√°gina": page_id,
            "ID da Conta de An√∫ncios": ad_account_id,
            "Nome da Campanha": campaign_name,
            "Nome do Ad Set": ad_set_name,
            "Nome do An√∫ncio": ad_name,
            "Link de Destino": destination_link,
            "Texto do An√∫ncio": ad_text
        }
        
        missing_fields = [field for field, value in required_fields.items() if not value]
        
        # Validate URL format for Destination Link
        invalid_url = False
        if destination_link and not is_valid_url(destination_link):
            invalid_url = True
        
        if missing_fields:
            st.error(f"Por favor, preencha todos os campos obrigat√≥rios: {', '.join(missing_fields)}")
        elif invalid_url:
            st.error("Link de Destino deve ser uma URL v√°lida come√ßando com http:// ou https://")
        else:
            # Prepare image and thumbnail links
            image_urls = [link.strip() for link in campaign_image_links.split('\n') if link.strip()] if campaign_image_links else []
            thumbnail_url = campaign_thumbnail_link.strip() if campaign_thumbnail_link else ""
            
            # Prepare data for submission
            campaign_data = {
                "ID da P√°gina": page_id,
                "ID da Conta de An√∫ncios": ad_account_id,
                "Tipo de Campanha": campaign_type,
                "Nome da Campanha": campaign_name,
                "Objetivo da Campanha": campaign_objective,
                "Status da Campanha": campaign_status,
                "Nome do Ad Set": ad_set_name,
                "Tipo de Otimiza√ß√£o": optimization_type,
                "Cobran√ßa do Adset": billing_event,
                "Estrat√©gia de Lance": bid_strategy,
                "Or√ßamento Di√°rio": daily_budget,
                "Valor M√°ximo de Lance": bid_cap,
                "Tipo de An√∫ncio": ad_type,
                "Nome do An√∫ncio": ad_name,
                "Texto do An√∫ncio": ad_text,
                "Link de Destino": destination_link,
                "CTA": cta,
                "Tipo de Destino": destination_type,
                "Imagens": image_urls,
                "Thumbnail (Video)": thumbnail_url,
                "Conta em Qual BM?": connected_bm,
                "Idade M√≠nima": min_age,
                "Idade M√°xima": max_age,
                "Cidade": city,
                "Estado (SP, AL, MT...)": state,
                "Pa√≠s (BR, EUA...)": country,
                "Raio de Dist√¢ncia": radius,
                "SubmissionTime": str(datetime.now())
            }
            
            # Prepare final payload
            payload = {
                "tipo_requisicao": "criar_campanha",
                "dados": campaign_data,
                "timestamp": str(datetime.now())
            }
            
            # Send to webhook
            webhook_url = "https://ferrazpiai-n8n-editor.uyk8ty.easypanel.host/webhook-test/e78ecade-5474-4877-93a6-f91980088282"
            success, message = send_to_webhook(payload, webhook_url)
            
            if success:
                st.markdown(f'<div class="success-message">{message}</div>', unsafe_allow_html=True)
            else:
                st.markdown(f'<div class="error-message">{message}</div>', unsafe_allow_html=True)

            # Display JSON preview
            st.subheader("üìã Preview JSON")
            st.json(payload,expanded=False)

# Function for Documentation page
def show_documentation_page():
    st.markdown('<h1 class="main-header">üìö Documenta√ß√£o Interativa</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Aprenda sobre componentes do Meta Ads e melhores pr√°ticas</p>', unsafe_allow_html=True)
    
    # Create tabs for different documentation sections
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üéØ Objetivos de Campanha", 
        "‚öôÔ∏è Tipos de Otimiza√ß√£o", 
        "üí∞ Eventos de Cobran√ßa", 
        "üìä Estrat√©gias de Lance", 
        "üîò CTAs", 
        "üåê Tipos de Destino"
    ])
    
    with tab1:
        st.header("Objetivos de Campanha")
        st.markdown("""
        Os objetivos de campanha definem a meta principal da sua campanha publicit√°ria. O objetivo escolhido determinar√° quais op√ß√µes de otimiza√ß√£o e formatos de an√∫ncio estar√£o dispon√≠veis.
        """)
        
        objectives_data = {
            "Objetivo": ["Awareness", "Traffic", "Engagement", "Leads", "App Promotion", "Sales"],
            "Descri√ß√£o": [
                "Aumentar o reconhecimento da marca e alcan√ßar um p√∫blico mais amplo",
                "Direcionar tr√°fego para seu site, app ou outro destino",
                "Fazer com que mais pessoas interajam com seu conte√∫do ou p√°gina",
                "Coletar informa√ß√µes de leads de pessoas interessadas",
                "Aumentar instala√ß√µes de app ou engajamento com seu app",
                "Impulsionar vendas no seu site, app ou atrav√©s de mensagens"
            ],
            "Melhor Para": [
                "Marcas novas, lan√ßamentos de produtos ou entrada em novos mercados",
                "Blogs, marketing de conte√∫do ou direcionamento de visitas ao site",
                "Crescimento de presen√ßa nas redes sociais ou promo√ß√£o de conte√∫do",
                "Marketing B2B, empresas de servi√ßos ou registros de eventos",
                "Desenvolvedores de apps m√≥veis ou empresas com aplicativos",
                "Empresas de e-commerce ou marketing de resposta direta"
            ]
        }
        
        st.table(pd.DataFrame(objectives_data))
        
        with st.expander("Saiba Mais Sobre Objetivos de Campanha"):
            st.markdown("""
            ### Awareness (Consci√™ncia)
            - **Foco**: Alcance e reconhecimento da marca
            - **M√©tricas**: Impress√µes, alcance, brand lift
            - **Exemplo**: Uma nova marca de moda querendo se apresentar a potenciais clientes
            
            ### Traffic (Tr√°fego)
            - **Foco**: Visitas ao site ou app
            - **M√©tricas**: Cliques no link, visualiza√ß√µes da p√°gina de destino
            - **Exemplo**: Um blog promovendo seus artigos mais recentes
            
            ### Engagement (Engajamento)
            - **Foco**: Intera√ß√µes com conte√∫do
            - **M√©tricas**: Engajamento com posts, curtidas de p√°gina, visualiza√ß√µes de v√≠deo
            - **Exemplo**: Um restaurante promovendo seu card√°pio ou eventos
            
            ### Leads
            - **Foco**: Gera√ß√£o de leads e coleta de informa√ß√µes
            - **M√©tricas**: Preenchimento de formul√°rios, mensagens
            - **Exemplo**: Uma imobili√°ria coletando informa√ß√µes de contato de potenciais compradores
            
            ### App Promotion (Promo√ß√£o de App)
            - **Foco**: Instala√ß√µes e engajamento com app
            - **M√©tricas**: Instala√ß√µes de app, eventos de app
            - **Exemplo**: Um desenvolvedor de jogos m√≥veis promovendo um novo jogo
            
            ### Sales (Vendas)
            - **Foco**: Convers√µes e compras
            - **M√©tricas**: Compras, adicionar ao carrinho, checkout iniciado
            - **Exemplo**: Uma loja de e-commerce promovendo produtos
            """)
    
    with tab2:
        st.header("Tipos de Otimiza√ß√£o")
        st.markdown("""
        Os tipos de otimiza√ß√£o (ou metas de desempenho) informam ao algoritmo do Meta qual a√ß√£o espec√≠fica voc√™ quer que os usu√°rios realizem. Isso ajuda o Meta a mostrar seus an√∫ncios para pessoas mais propensas a realizar essa a√ß√£o.
        """)
        
        optimization_data = {
            "Tipo de Otimiza√ß√£o": [
                "Impressions", 
                "Reach", 
                "Link Clicks",
                "Landing Page Views", 
                "Post Engagement", 
                "Video Views", 
                "Lead Generation", 
                "Conversions", 
                "App Installs", 
                "App Events", 
                "Catalog Sales", 
                "Value"
            ],
            "Descri√ß√£o": [
                "Maximizar o n√∫mero de vezes que seu an√∫ncio √© exibido",
                "Mostrar seu an√∫ncio para o m√°ximo n√∫mero de pessoas √∫nicas",
                "Obter o m√°ximo de cliques para seu destino",
                "Obter visitas ao seu site que carregam completamente",
                "Obter o m√°ximo de curtidas, coment√°rios, compartilhamentos ou outras intera√ß√µes",
                "Fazer com que pessoas assistam ao seu conte√∫do de v√≠deo",
                "Coletar o m√°ximo de leads atrav√©s de formul√°rios do Meta",
                "Impulsionar a√ß√µes espec√≠ficas no seu site ou app",
                "Obter o m√°ximo de instala√ß√µes de app",
                "Impulsionar a√ß√µes espec√≠ficas dentro do seu app",
                "Impulsionar vendas do seu cat√°logo de produtos",
                "Maximizar o valor total de compra"
            ],
            "Compat√≠vel Com": [
                "Awareness",
                "Awareness",
                "Traffic",
                "Traffic",
                "Engagement",
                "Engagement",
                "Leads",
                "Leads, Sales",
                "App Promotion",
                "App Promotion",
                "Sales",
                "Sales"
            ]
        }
        
        st.table(pd.DataFrame(optimization_data))
    
    with tab3:
        st.header("Eventos de Cobran√ßa")
        st.markdown("""
        Os eventos de cobran√ßa determinam como o Meta cobra pelos seus an√∫ncios. Diferentes metas de otimiza√ß√£o podem ter diferentes eventos de cobran√ßa dispon√≠veis.
        """)
        
        billing_data = {
            "Evento de Cobran√ßa": ["Impressions (CPM)", "Link Clicks (CPC)", "Thruplay", "Two-Second Continuous Video Views"],
            "Descri√ß√£o": [
                "Voc√™ paga por cada 1.000 impress√µes (vezes que seu an√∫ncio √© exibido)",
                "Voc√™ paga quando algu√©m clica no seu an√∫ncio",
                "Voc√™ paga quando algu√©m assiste seu v√≠deo por pelo menos 15 segundos ou at√© o final",
                "Voc√™ paga quando algu√©m assiste pelo menos 2 segundos cont√≠nuos do seu v√≠deo"
            ],
            "Compat√≠vel Com": [
                "Todos os tipos de otimiza√ß√£o",
                "Apenas otimiza√ß√£o de Link Clicks",
                "Apenas otimiza√ß√£o de Video Views",
                "Apenas otimiza√ß√£o de Video Views"
            ],
            "Melhor Para": [
                "Campanhas de brand awareness, alcance, ou quando voc√™ confia na otimiza√ß√£o do Meta",
                "Campanhas de tr√°fego quando voc√™ quer pagar apenas por cliques reais",
                "Campanhas de v√≠deo quando voc√™ quer espectadores engajados",
                "Campanhas de v√≠deo quando voc√™ quer exposi√ß√£o mais ampla de v√≠deo"
            ]
        }
        
        st.table(pd.DataFrame(billing_data))
    
    with tab4:
        st.header("Estrat√©gias de Lance")
        st.markdown("""
        As estrat√©gias de lance determinam como o Meta gerencia seus lances no leil√£o de an√∫ncios. Diferentes estrat√©gias oferecem n√≠veis variados de controle sobre custos versus volume.
        """)
        
        bid_data = {
            "Estrat√©gia de Lance": [
                "Highest Volume or Value (anteriormente Lowest Cost)", 
                "Cost per Result Goal (anteriormente Cost Cap)", 
                "Bid Cap", 
                "ROAS Goal"
            ],
            "Descri√ß√£o": [
                "Meta automaticamente faz lances para obter o m√°ximo de resultados dentro do seu or√ßamento",
                "Meta tenta manter seu custo m√©dio por resultado em ou abaixo do seu alvo",
                "Define um valor m√°ximo estrito que voc√™ pagar√° por cada resultado",
                "Meta tenta alcan√ßar seu retorno alvo sobre gasto com an√∫ncios"
            ],
            "N√≠vel de Controle": [
                "Baixo controle, alta automa√ß√£o",
                "Controle m√©dio, automa√ß√£o m√©dia",
                "Alto controle, baixa automa√ß√£o",
                "Controle m√©dio, focado em valor"
            ],
            "Melhor Para": [
                "Maioria dos anunciantes, especialmente ao come√ßar",
                "Anunciantes com alvos espec√≠ficos de CPA que ainda querem volume",
                "Anunciantes com limites r√≠gidos de custo que n√£o podem exceder",
                "E-commerce com otimiza√ß√£o baseada em valor"
            ]
        }
        
        st.table(pd.DataFrame(bid_data))
    
    with tab5:
        st.header("Call to Action (CTA) Buttons")
        st.markdown("""
        Os bot√µes de Call to Action orientam os usu√°rios sobre qual a√ß√£o tomar ap√≥s ver seu an√∫ncio. O CTA certo pode impactar significativamente sua taxa de convers√£o.
        """)
        
        cta_data = {
            "Bot√£o CTA": [
                "Learn More", 
                "Shop Now", 
                "Sign Up", 
                "Download", 
                "Get Quote", 
                "Contact Us", 
                "Apply Now", 
                "Book Now", 
                "Get Offer", 
                "Subscribe", 
                "Watch More"
            ],
            "Melhor Para": [
                "Awareness, conte√∫do educacional, posts de blog",
                "E-commerce, p√°ginas de produtos, cat√°logos",
                "Inscri√ß√µes em newsletter, cria√ß√£o de conta",
                "Apps, PDFs, recursos, ferramentas",
                "Servi√ßos que requerem pre√ßos personalizados",
                "Atendimento ao cliente, consultas",
                "Candidaturas a emprego, solicita√ß√µes de empr√©stimo",
                "Agendamentos, reservas, eventos",
                "Promo√ß√µes, descontos, ofertas especiais",
                "Memberships, servi√ßos recorrentes",
                "Conte√∫do de v√≠deo, webinars, tutoriais"
            ],
            "Destinos Compat√≠veis": [
                "Website, Instagram Profile",
                "Website, Shop",
                "Website, Instant Form",
                "App, Website",
                "Website, Messenger, WhatsApp",
                "Website, Messenger, WhatsApp, Phone Call",
                "Website, Instant Form",
                "Website, Messenger",
                "Website, Shop",
                "Website",
                "Website, Video"
            ]
        }
        
        st.table(pd.DataFrame(cta_data))
    
    with tab6:
        st.header("Tipos de Destino")
        st.markdown("""
        O tipo de destino determina para onde os usu√°rios ir√£o ap√≥s clicar no seu an√∫ncio. Escolher o destino certo √© crucial para proporcionar uma experi√™ncia de usu√°rio fluida.
        """)
        
        destination_data = {
            "Tipo de Destino": [
                "Website", 
                "App", 
                "Messenger", 
                "WhatsApp", 
                "Instagram Profile", 
                "Phone Call", 
                "Shop"
            ],
            "Descri√ß√£o": [
                "Direciona usu√°rios para uma p√°gina web ou landing page",
                "Direciona usu√°rios para baixar ou abrir um app",
                "Abre uma conversa no Messenger com seu neg√≥cio",
                "Abre uma conversa no WhatsApp com seu neg√≥cio",
                "Leva usu√°rios para seu perfil do Instagram",
                "Inicia uma liga√ß√£o telef√¥nica para seu neg√≥cio",
                "Leva usu√°rios para sua Meta Shop ou cat√°logo"
            ],
            "Melhor Para": [
                "Maioria dos tipos de campanha, especialmente quando voc√™ tem um site forte",
                "Promo√ß√£o de app ou quando seu app oferece a melhor experi√™ncia",
                "Comunica√ß√£o direta, atendimento ao cliente ou vendas personalizadas",
                "Comunica√ß√£o direta, especialmente para audi√™ncias internacionais",
                "Construir seguidores sociais ou mostrar conte√∫do visual",
                "Neg√≥cios locais ou servi√ßos que requerem conversa direta",
                "Neg√≥cios de e-commerce usando recursos de compras do Meta"
            ],
            "Requisitos": [
                "URL v√°lida do site, landing page otimizada para mobile",
                "App registrado no Meta, listagem na app store",
                "P√°gina do Facebook com Messenger habilitado",
                "Conta WhatsApp Business conectada ao Meta",
                "Conta comercial do Instagram vinculada √† P√°gina do Facebook",
                "N√∫mero de telefone v√°lido",
                "Cat√°logo de produtos configurado no Commerce Manager"
            ]
        }
        
        st.table(pd.DataFrame(destination_data))
    
    # Compatibility table
    st.header("üìä Tabela de Compatibilidade")
    st.markdown("""
    Esta tabela mostra as combina√ß√µes recomendadas de Objetivo da Campanha, Meta de Otimiza√ß√£o, Estrat√©gia de Lance, CTA e Tipo de Destino.
    """)
    
    compatibility_data = {
        "Objetivo da Campanha": [
            "AWARENESS",
            "TRAFFIC",
            "ENGAGEMENT",
            "LEADS",
            "APP PROMOTION",
            "SALES"
        ],
        "Meta de Otimiza√ß√£o": [
            "REACH",
            "LINK_CLICKS",
            "POST_ENGAGEMENT",
            "LEAD_GENERATION",
            "APP_INSTALLS",
            "CONVERSIONS"
        ],
        "Estrat√©gia de Lance Sugerida": [
            "HIGHEST_VOLUME",
            "HIGHEST_VOLUME",
            "HIGHEST_VOLUME",
            "COST_PER_RESULT",
            "COST_PER_RESULT",
            "COST_PER_RESULT"
        ],
        "CTA Recomendado": [
            "LEARN_MORE",
            "LEARN_MORE",
            "WATCH_MORE",
            "SIGN_UP",
            "DOWNLOAD",
            "BUY_NOW"
        ],
        "Destinos Comuns": [
            "WEBSITE",
            "WEBSITE",
            "WEBSITE, ON-POST",
            "WEBSITE, INSTANT_FORM",
            "APP",
            "WEBSITE, SHOP"
        ]
    }
    
    st.table(pd.DataFrame(compatibility_data))

# Sidebar navigation
with st.sidebar:
    # Use the new logo URL (you can replace this with the correct URL when available)
    st.image("https://i.postimg.cc/T2k1kpM0/Chat-GPT-Image-29-de-mai-de-2025-17-52-00-Editado.png", width=300)
    st.title("Meta Ads Manager")
    
    # Navigation buttons
    if st.button("üß© Criar An√∫ncios", key="nav_create_ads", use_container_width=True):
        st.session_state.page = 'Create Ads'
    
    if st.button("üöÄ Criar Campanhas", key="nav_create_campaigns", use_container_width=True):
        st.session_state.page = 'Create Campaigns'
    
    if st.button("üìö Documenta√ß√£o", key="nav_documentation", use_container_width=True):
        st.session_state.page = 'Documentation'
    
    st.divider()
    st.caption("¬© 2025 GTBOT")

# Main content based on selected page
if st.session_state.page == 'Create Ads':
    show_create_ads_page()
elif st.session_state.page == 'Create Campaigns':
    show_create_campaigns_page()
elif st.session_state.page == 'Documentation':
    show_documentation_page()
